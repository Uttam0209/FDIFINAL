using BusinessLayer;
using Encryption;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Test_Lab_Userdetails : System.Web.UI.Page
{
    Cryptography objCrypto = new Cryptography();
    Logic Lo = new Logic();

    string sType = "";
    string strInterestedArea = "";
    string strMasterAlloted = "";
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["User"] != null)
        {
            if (!IsPostBack)
            {
                txtstartdate.Attributes["min"] = DateTime.Now.ToString("yyyy-MM-dd");

                lblid.Text = Request.QueryString["id"].ToString();
                DataTable dttestdetails = Lo.RetriveTestDetailsbyId(Convert.ToInt32(lblid.Text));
                lblorganisationname.Text = dttestdetails.Rows[0]["organisation_id"].ToString();
                if (lblorganisationname.Text == "")
                {
                    lblorganisationname.Text = "N/A";
                }
                //  lblDivision.Text = dttestdetails.Rows[0]["test_facility_id"].ToString();
                //   lblUnit.Text = dttestdetails.Rows[0]["lab_id"].ToString();
                lbltestfacility.Text = dttestdetails.Rows[0]["test_facility_id"].ToString();
                if (lbltestfacility.Text == "")
                {
                    lbltestfacility.Text = "N/A";
                }
                lblLabname.Text = dttestdetails.Rows[0]["lab_id"].ToString();
                if (lblLabname.Text == "")
                {
                    lblLabname.Text = "N/A";
                }
                lblDiscipline.Text = dttestdetails.Rows[0]["discipline_id"].ToString();
                if (lblDiscipline.Text == "")
                {
                    lblDiscipline.Text = "N/A";
                }
                lbltestname.Text = dttestdetails.Rows[0]["test_name"].ToString();
                if (lbltestname.Text == "")
                {
                    lbltestname.Text = "N/A";
                }
                lblmaterial.Text = dttestdetails.Rows[0]["product_material"].ToString();
                if (lblmaterial.Text == "")
                {
                    lblmaterial.Text = "N/A";
                }
                lblspecifications.Text = dttestdetails.Rows[0]["specifications"].ToString();
                if (lblspecifications.Text == "")
                {
                    lblspecifications.Text = "N/A";
                }
                MenuLogin();
            }
        }
        else
        {
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), "alert",
                "ErrorMssgPopup('Session Expired,Please login again');window.location='Login'", true);
        }
    }

    protected void SaveBookingOrders()
    {
        try
        {
            if (txtnoofsample.Text.Trim() != "" || txtstartdate.Text.Trim() != "" || txtendDate.Text.Trim() != "")
            {
                try
                {
                    //DateTime stdt = Convert.ToDateTime(txtstartdate.Text);
                    //string smdd = stdt.ToString("dd-MM-yyyy");
                    //DateTime endtt = Convert.ToDateTime(txtendDate.Text);
                    //string mdd = endtt.ToString("dd-MM-yyyy");
                    string str = Lo.savebookorders(Convert.ToInt32(lblid.Text), lbltestname.Text, lblorganisationname.Text, lblDiscipline.Text, lblLabname.Text, Convert.ToInt32(txtnoofsample.Text), txteqptbetested.Text.Trim(), txtwghtbetested.Text.Trim(), txtstartdate.Text, txtendDate.Text, Convert.ToString(fufiles.ToString()), txtremarks.Text.Trim());
                    if (str != "-1")
                    {
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), "alert", "alert('Test Id (Portal) = Booked" + str + " saved successfully.')", true);
                        Clear();
                    }
                    else
                    {
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), "alert", "alert('Record not saved.')", true);
                    }
                }
                catch(Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('record:::::)", true);
                }
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Updated Successfully!!!')", true);
                // Response.RedirectToRoute("Testdetails");
            }
            else
            {
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), "alert", "alert('Fields are mandatory.')", true);
            }
        }
        catch (Exception ex)
        {

        }
    }


    
    protected void btnsubmit_Click(object sender, EventArgs e)
    {
        try
        {
            SaveBookingOrders();
            Clear();
        }
        catch (Exception ex)
        {

        }
    }

    public void Clear()
    {
        txtendDate.Text = "";
        txteqptbetested.Text = "";
        txtnoofsample.Text = "";
        txtremarks.Text = "";
        txtstartdate.Text = "";
        txtwghtbetested.Text = "";

    }

    #region Menu Wise Login
    protected void MenuLogin()
    {
        //lblusername.Text = objCrypto.DecryptData(Session["User"].ToString());
        lblusername.Text = objCrypto.DecryptData(Session["User"].ToString());
        if (Session["VendorRefNo"] != null)
        {
            sType = Session["VendorRefNo"].ToString();
            DataTable dtCompany = Lo.RetriveMasterData(0, objCrypto.DecryptData(sType), "", 0, "", "", "InterestedAreaVendor");
            if (dtCompany.Rows.Count > 0)
            {
                DivCompanyName.Visible = true;
                lblmastercompany.Text = "Company - " + dtCompany.Rows[0]["V_CompName"].ToString() + " , ";
                strInterestedArea = dtCompany.Rows[0]["InterestedArea"].ToString();
                strMasterAlloted = dtCompany.Rows[0]["MasterAllowed"].ToString();
            }
        }
        if (strInterestedArea != "")
        {
            bindMenu(sType);
        }
        if (strMasterAlloted != "")
        {
            bindMasterMenu(sType);
        }
    }

    #endregion

    private void bindMenu(string sType)
    {
        StringBuilder strMenu = new StringBuilder();
        strMenu.Append("<ul class='nav  nav-list'>");
        string[] Categ = strInterestedArea.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
        string mCval = "";
        for (int x = 0; x < Categ.Length; x++)
        {
            mCval = Categ[x];
            DataTable dtArea = Lo.RetriveMasterData(Convert.ToInt64(mCval), sType, "", 0, "", "", "VendorIntAreaMenuId");
            foreach (DataRow row in dtArea.Rows)
            {
                strMenu.Append("<li class='parent-nav'><a href='#'  title='" + row["Tooltip"].ToString() + "'><i class='fas fa-tachometer-alt'></i><span class='hidden-minibar'>" + row["InterestArea"].ToString() + " </span><span class='menuNo' style='position:absolute; right:40px;top:13px;'>M" + row["Id"].ToString() + "</span> <i class='fas fa-angle-down'></i></a>");
                string[] Categ1 = dtArea.Rows[0]["MenuId"].ToString().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                string mCval1 = "";
                strMenu.Append("<ul class='parent-nav-child'>");
                for (int j = 0; j < Categ1.Length; j++)
                {
                    mCval1 = Categ1[j];
                    DataTable dtMenu = Lo.RetriveMasterData(0, "", objCrypto.DecryptData(Session["Type"].ToString()), Convert.ToInt16(mCval1), "", "", "MenuMain");
                    foreach (DataRow row2 in dtMenu.Rows)
                    {
                        strMenu.Append("<li class='parent-nav'><a href='" + row2["MenuUrl"].ToString() + "?mu=" + HttpUtility.UrlEncode(objCrypto.EncryptData(row2["Spanclass"].ToString())) + "&id=" + HttpUtility.UrlEncode(objCrypto.EncryptData(row["InterestArea"].ToString() + " >> " + row2["MenuName"].ToString())) + "' title='" + row2["Tooltip"].ToString() + "'><i class='fas fa-tachometer-alt'></i><span class='hidden-minibar'>" + row2["MenuName"].ToString() + "</span><span class='menuNo' style='position:absolute; right:40px;top:13px;'>C" + row2["MenuId"].ToString() + "</span>");
                        strMenu.Append("<i class='fas fa-angle-down'></i></a>");
                        DataTable Submenu = Lo.RetriveMasterData(0, "", objCrypto.DecryptData(Session["Type"].ToString()), Convert.ToInt16(row2["MenuID"].ToString()), "", "", "SubMenu");
                        if (Submenu.Rows.Count > 0)
                        {
                            strMenu.Append("<ul class='parent-nav-child'>");
                            foreach (DataRow row1 in Submenu.Rows)
                            {
                                strMenu.Append("<li><a href='" + row1["MenuUrl"].ToString() + "?mu=" + HttpUtility.UrlEncode(objCrypto.EncryptData(row1["Spanclass"].ToString())) + "&id=" + HttpUtility.UrlEncode(objCrypto.EncryptData(row["InterestArea"].ToString() + " >> " + row2["MenuName"].ToString() + " >> " + row1["MenuName"].ToString())) + "' title='" + row1["Tooltip"].ToString() + "'><i class='far fa-building'></i><span class='hidden-minibar'>" + row1["MenuName"].ToString() + "</span><span class='menuNo' style='position:absolute; right:20px;top:13px;'>L" + row1["MenuId"].ToString() + "</span></a></li> ");
                            }
                            strMenu.Append("</ul>");

                        }
                        strMenu.Append("</li>");
                    }
                }
                strMenu.Append("</ul>");
                strMenu.Append("</li>");
            }
            //  menu.InnerHtml = strMenu.ToString();
            strMenu.Append("</ul>");
        }
    }
    private void bindMasterMenu(string sType)
    {
        StringBuilder strMasterMenu = new StringBuilder();
        strMasterMenu.Append("<ul class='nav  nav-list'>");
        string[] MCateg = strMasterAlloted.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
        string MmCval = "";
        for (int x = 0; x < MCateg.Length; x++)
        {
            MmCval = MCateg[x];
            DataTable dtMArea = Lo.RetriveMasterData(Convert.ToInt64(MmCval), sType, "", 0, "", "", "VendorIntAreaMenuId");
            foreach (DataRow row in dtMArea.Rows)
            {
                strMasterMenu.Append("<li class='parent-nav'><a href='#'  title='" + row["Tooltip"].ToString() + "'><i class='fas fa-tachometer-alt'></i><span class='hidden-minibar'>" + row["InterestArea"].ToString() + " </span><span class='menuNo' style='position:absolute; right:40px;top:13px;'>M" + row["Id"].ToString() + "</span> <i class='fas fa-angle-down'></i></a>");
                string[] MCateg1 = dtMArea.Rows[0]["MenuId"].ToString().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                string MmCval1 = "";
                strMasterMenu.Append("<ul class='parent-nav-child'>");
                for (int j = 0; j < MCateg1.Length; j++)
                {
                    MmCval1 = MCateg1[j];
                    DataTable dtMMenu = Lo.RetriveMasterData(0, "", objCrypto.DecryptData(Session["Type"].ToString()), Convert.ToInt16(MmCval1), "", "", "MenuMainVendor");
                    foreach (DataRow row2 in dtMMenu.Rows)
                    {
                        strMasterMenu.Append("<li class='parent-nav'><a href='" + row2["MenuUrl"].ToString() + "?mu=" + objCrypto.EncryptData(row2["Spanclass"].ToString()) + "&id=" + objCrypto.EncryptData(row["InterestArea"].ToString() + " >> " + row2["MenuName"].ToString()) + "' title='" + row2["Tooltip"].ToString() + "'><i class='fas fa-tachometer-alt'></i><span class='hidden-minibar'>" + row2["MenuName"].ToString() + "</span><span class='menuNo' style='position:absolute; right:40px;top:13px;'>C" + row2["MenuId"].ToString() + "</span>");
                        strMasterMenu.Append("<i class='fas fa-angle-down'></i></a>");
                        DataTable SubMmenu = Lo.RetriveMasterData(0, "", objCrypto.DecryptData(Session["Type"].ToString()), Convert.ToInt16(row2["MenuID"].ToString()), "", "", "SubMenuVendor");
                        if (SubMmenu.Rows.Count > 0)
                        {
                            strMasterMenu.Append("<ul class='parent-nav-child'>");
                            foreach (DataRow row1 in SubMmenu.Rows)
                            {
                                strMasterMenu.Append("<li><a href='" + row1["MenuUrl"].ToString() + "?mu=" + objCrypto.EncryptData(row1["Spanclass"].ToString()) + "&id=" + objCrypto.EncryptData(row["InterestArea"].ToString() + " >> " + row2["MenuName"].ToString() + " >> " + row1["MenuName"].ToString()) + "' title='" + row1["Tooltip"].ToString() + "'><i class='far fa-building'></i><span class='hidden-minibar'>" + row1["MenuName"].ToString() + "</span><span class='menuNo' style='position:absolute; right:20px;top:13px;'>L" + row1["MenuId"].ToString() + "</span></a></li> ");
                            }
                            strMasterMenu.Append("</ul>");
                        }
                        strMasterMenu.Append("</li>");
                    }
                }
                strMasterMenu.Append("</ul>");
                strMasterMenu.Append("</li>");
            }
        }
        //  MasterMenu.InnerHtml = strMasterMenu.ToString();
        strMasterMenu.Append("</ul>");
    }

    protected void lbllogout_Click(object sender, EventArgs e)
    {
        //  FuncLogout();
        Response.Redirect("TestLab");
    }

    protected void FuncLogout()
    {
        Session.Abandon();
        Session.Remove("Type");
        Session.Remove("User");
        Session.Remove("CompanyRefNo");
        Session.Remove("VendorRefNo");
        Session.Remove("SFToken");
        Session.RemoveAll();
        Session.Contents.RemoveAll();
        Session.Clear();
        Response.Cache.SetCacheability(HttpCacheability.NoCache);
        Response.Cookies["DefaultDpsu"].Expires = DateTime.Now;
        Response.Buffer = true;
        Response.AppendHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
        Response.AppendHeader("Pragma", "no-cache"); // HTTP 1.0.
        Response.AppendHeader("Expires", "0"); // Proxies.
        if (Request.Cookies["User"] != null)
        {
            Response.Cookies["User"].Value = string.Empty;
            Response.Cookies["User"].Expires = DateTime.Now.AddMonths(-20);
        }
        if (Request.Cookies["SFToken"] != null)
        {
            Response.Cookies["SFToken"].Value = string.Empty;
            Response.Cookies["SFToken"].Expires = DateTime.Now.AddMonths(-20);
        }
    }
}